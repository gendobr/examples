# -*- coding: utf-8 -*-
"""owlready2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11M1d8pB0RMCaXhE135AeIKuPp57jlTrW

# Initial actions

Before we start, we need to install owlready2:
"""

!pip install owlready2

"""Then we import the library"""

from owlready2 import *

"""and load the pizza ontology"""

onto_path.append("/home/cache")
onto = get_ontology("https://raw.githubusercontent.com/owlcs/pizza-ontology/master/pizza.owl")
onto.load()

"""The URL of the pizza.owl is different from namespace.
So we load the correct namespace.
"""

pizza = onto.get_namespace('http://www.co-ode.org/ontologies/pizza/pizza.owl')

"""Then we start the reasoner to build missing relations"""

sync_reasoner()

"""Show all defined classes:"""

list(onto.classes())

"""All properties"""

list(onto.properties())

"""# Show list of pizzas that have fish topping

Create set of fishToppings and its' descendants
"""

fishToppingList=set(pizza.FishTopping.descendants())
fishToppingList

"""Display pizzas which have **hasTopping** property"""

[x for x in onto.classes() if x.hasTopping]

"""Show classes that have fish toppings"""

[x for x in onto.classes() if x.hasTopping and len(fishToppingList.intersection(set(x.hasTopping)))>0]

"""# Show pizzas with vegetable toppings

Explore class names (pizza.OliveTopping is one of VegetableTopping)
"""

pizza.OliveTopping.is_a

"""Create a set of vegetable toppings"""

vegetableToppingList=set(pizza.VegetableTopping.descendants())
vegetableToppingList

"""Show classes that have vegetable toppings"""

[x for x in onto.classes() if x.hasTopping and len(vegetableToppingList.intersection(set(x.hasTopping)))>0]

"""# Show pizzas with Hot spiciness

Explore structure
"""

pizza.Spiciness.descendants()

pizza.CajunSpiceTopping.hasSpiciness

pizza.CajunSpiceTopping.is_a

pizza.SpicyTopping.descendants()

"""Filter SpicyToppings"""

spicyToppings={x for x in pizza.SpicyTopping.descendants() if x.hasSpiciness and x.hasSpiciness==pizza.Hot}

spicyToppings

"""Select pizzas having spicy toppings"""

[x for x in pizza.NamedPizza.descendants() if x.hasTopping and len(spicyToppings.intersection(set(x.hasTopping)))>0]

"""Another way to select. Use the 
`pizza.SpicyPizza`
class
"""

set(pizza.SpicyPizza.descendants()).intersection(pizza.NamedPizza.descendants())

"""# Show pizzas having 2 or more cheeses in toppings

Do some exploration
"""

pizza.CheeseTopping.descendants()

"""Compose list of desired toppings"""

cheeseToppings={x for x in pizza.CheeseTopping.descendants()}
cheeseToppings

"""Select pizzas (pizza.FourCheesesTopping is special case)"""

[x 
    for x in pizza.NamedPizza.descendants() 
    if x.hasTopping 
       and ( len(cheeseToppings.intersection(set(x.hasTopping)))>=2 or pizza.FourCheesesTopping in x.hasTopping)
]

"""# Group pizzas by country"""

[(x.hasCountryOfOrigin,x) for x in onto.classes() if x.hasCountryOfOrigin]

tmp=[(x.hasCountryOfOrigin[0],x) for x in onto.classes() if x.hasCountryOfOrigin]

by_country={}
for c,p in tmp:
  if c not in by_country:
    by_country[c]=[]
  by_country[c].append(p)
by_country

"""# Show ingrediends of a given pizza"""

given_pizza=pizza.American

for t in given_pizza.hasTopping:
  print(t)
  print(t.)

given_pizza.hasBase

"""# Search pizza by topping"""

the_topping = pizza.MushroomTopping

[x for x in onto.classes() if x.hasTopping and the_topping in x.hasTopping]

"""# Show toppings grouped by types"""

list(pizza.PizzaTopping.subclasses())

for x in list(pizza.PizzaTopping.subclasses()):
  print(x)
  print(x.descendants())

"""# Show pizzas that don't have a given topping"""



